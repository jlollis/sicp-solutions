#lang scheme
(require racket/trace)

#| Exercise 1.15. The sine of an angle (specified in radians) can be computed by making use of the

approximation sin x is approximately equal to x if x is sufficiently small, and the trigonometric identity

sin x = 3 sin (x/3) - 4 (sin ^3) (x/3)

to reduce the size of the argument of sin. (For purposes of this exercise an angle is considered
‘‘sufficiently small’’ if its magnitude is not greater than 0.1 radians.) These ideas are incorporated in
the following procedures:

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
  (p (sine (/ angle 3.0)))))


a. How many times is the procedure p applied when (sine 12.15) is evaluated?

b. What is the order of growth in space and number of steps (as a function of a) used by the process
   generated by the sine procedure when (sine a) is evaluated? |#

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
   (if (not (> (abs angle) 0.1))
       angle
       (p (sine (/ angle 3.0)))))

;;; part a

(trace sine)
(sine 12.15)

;;; part b test

(sine 24.3)
(sine 24.31)
(sine 24)
(sine 25)
(sine 33)
(sine 45)
(sine 11)
(sine .2)
(sine .09)
(sine -.009)

#|
Answer:

a. For the angle 12.15, process p is applied 5 times.

  >{sine 12.15}
p > {sine 4.05}
p p  > >{sine 1.3499999999999999}
p p p  > > {sine 0.44999999999999996}
p p p p  > > >{sine 0.15}
p p p p p  > > > {sine 0.049999999999999996}

  < < < 0.049999999999999996
  < < <0.1495
  < < 0.4351345505
  < <0.9758465331678772
  < -0.7895631144708228
  <-0.39980345741334
  -0.39980345741334

b. The angle a is divided by 3 each time the procedure p is applied. Expressing this differently, we can say that p is applied once for each complete power of 3 contained within the angle a.
Therefore, given a positive argument, we can compute the number of times p is applied as the ceiling of the base 3 logarithm of the argument divided by 0.1, or (ceiling(/ (log (/ 12.15 0.1)) (log 3)))
If we measure the required space and the number of steps by counting the invocations of p, the order of growth of the process generated by (sine a) is logarithmic.
Exactly, the number of steps required are (ceiling(/ (log (/ a 0.1)) (log 3))).
In other words we have O(log(x)) order of growth.

|#


